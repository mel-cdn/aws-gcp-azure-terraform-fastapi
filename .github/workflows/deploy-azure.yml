name: Deploy to Azure

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string

jobs:
  terraform_validate:
    name: Azure Terraform Validation
    uses: ./.github/workflows/terraform-validate.yml
    with:
      path: ./infra/terraform/azure

  terraform_deployment:
    name: Azure Terraform Deployment
    needs: [ terraform_validate ]
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    env:
      ENVIRONMENT: ${{ inputs.environment }}
      TF_STORAGE_ACCOUNT: ${{ secrets.AZURE_TF_STORAGE_ACCOUNT }}
      TF_RESOURCE_GROUP: ${{ vars.AZURE_TF_RESOURCE_GROUP }}
      LOCATION: ${{ vars.AZURE_LOCATION }}
      INFRA: ${{ vars.AZURE_INFRA }}
      APP_NAME: ${{ vars.APP_NAME }}
      ROOT_DOMAIN_NAME: ${{ vars.ROOT_DOMAIN_NAME }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set Terraform Env Vars
        run: |
          CREDS=$(echo '${{ secrets.AZURE_CREDENTIALS }}')
          echo "ARM_CLIENT_ID=$(echo $CREDS | jq -r .clientId)" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=$(echo $CREDS | jq -r .clientSecret)" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=$(echo $CREDS | jq -r .tenantId)" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=$(echo $CREDS | jq -r .subscriptionId)" >> $GITHUB_ENV

      - name: Set up Python for Building Package
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pipenv==2025.0.4

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.5

      - name: Terraform Init
        working-directory: ./infra/terraform/azure
        run: |
          terraform init \
            -backend-config="resource_group_name=${TF_RESOURCE_GROUP}" \
            -backend-config="storage_account_name=${TF_STORAGE_ACCOUNT}" \
            -backend-config="container_name=terraform-state" \
            -backend-config="key=${APP_NAME}/tfstate-"

          terraform workspace select -or-create "${ENVIRONMENT}"

      - name: Terraform Plan
        working-directory: ./infra/terraform/azure
        run: |
          terraform plan \
            -var="location=${LOCATION}" \
            -var="infra=${INFRA}" \
            -var="environment=${ENVIRONMENT}" \
            -var="app_name=${APP_NAME}" \
            -var="root_domain_name=${ROOT_DOMAIN_NAME}" \
            -out=tfplan

      - name: Terraform Apply
        working-directory: ./infra/terraform/azure
        run: terraform apply -auto-approve tfplan
